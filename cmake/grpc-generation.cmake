cmake_minimum_required(VERSION 3.18)

# searching for the 'protoc' (protobuf compiler utility) and grpc plugin for C++
# both must be located inside the bin directory of the grpc instllation path
# you can also set the absolute paths for the below commands,
# e.g., 'find_program(_PROTOBUF_PROTOC /Users/username/.local/bin/protoc)'
find_program(_PROTOBUF_PROTOC protoc)
find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)

# root directory where the proto models located
set(proto_models_dir "${CMAKE_CURRENT_SOURCE_DIR}/src/proto")

# list of all proto models of the project
# insert relative paths of the proto models
set(proto_filepaths
        "src/proto/services/authservice/authservice.proto"
        "src/proto/services/profile_service/profile.proto"
)

# list of the generated sources of the proto models
set(generated_proto_models_srcs "")

# iterating over every proto model filepath and generate the corresponding source files
foreach(filepath ${proto_filepaths})
    # obtain an absolute path of a proto file
    get_filename_component(proto_filepath ${filepath} ABSOLUTE)

    # extracting everything that goes after '**src/proto/' prefix,
    # e.g.,  "/Users/username/dev/project/src/proto/services/auth-service.proto" -> "/services/auth-service"
    string(REGEX REPLACE ".*\/?src\/proto\/(.*)\.proto$" "\\1" protofile_location ${filepath})

    # set the sources that will be generated by protoc
    set(proto_src "${CMAKE_CURRENT_BINARY_DIR}/${protofile_location}.pb.cc")
    set(proto_hdr "${CMAKE_CURRENT_BINARY_DIR}/${protofile_location}.pb.h")
    set(grpc_src "${CMAKE_CURRENT_BINARY_DIR}/${protofile_location}.grpc.pb.cc")
    set(grpc_hdr "${CMAKE_CURRENT_BINARY_DIR}/${protofile_location}.grpc.pb.h")

    # creating a custom command which generates the aforementioned sources
    add_custom_command(
        OUTPUT "${proto_src}" "${proto_hdr}" "${grpc_src}" "${grpc_hdr}"
        COMMAND ${_PROTOBUF_PROTOC}
        ARGS --grpc_out "${CMAKE_CURRENT_BINARY_DIR}"
        --cpp_out "${CMAKE_CURRENT_BINARY_DIR}"
        -I "${proto_models_dir}"
        --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}"
        "${proto_filepath}"
        DEPENDS "${proto_filepath}"
    )

    # appending the generated sources into the list
    list(APPEND generated_proto_models_srcs ${proto_src} ${proto_hdr} ${grpc_src} ${grpc_hdr})
endforeach()

message(NOTICE "Generated gRPC & Protobuf source files: " ${generated_proto_models_srcs})

# custom task that awaits generation of all proto files written in 'proto_filepaths' variable
add_custom_target(generate_proto_models ALL
    DEPENDS ${generated_proto_models_srcs}
)
